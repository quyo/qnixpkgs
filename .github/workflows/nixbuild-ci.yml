name: nixbuild-ci

on:
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build-flake:
    name: Build flake
    uses: quyo/qnixpkgs/.github/workflows/nixbuild-ci-workflow.yml@main
    secrets:
      nixbuild_ssh_key: ${{ secrets.NIXBUILD_SSH_KEY }}
    with:
      filter_builds: '.top_attr == "packages" and .attr != "danecheck" and .attr != "danecheck-cronic" and .attr != "danecheck-unstable" and .attr != "danecheck-cronic-unstable"'
#     filter_builds: '.attr == "ci-build"'

  upload-flake:
    name: Upload flake
    runs-on: ubuntu-22.04
    needs: build-flake
    steps:
      - uses: actions/checkout@v3

      - uses: nixbuild/nix-quick-install-action@v19
        with:
          nix_on_tmpfs: false
          nix_conf: |
            experimental-features = nix-command flakes

      - uses: nixbuild/nixbuild-action@v15
        with:
          nixbuild_ssh_key: ${{ secrets.NIXBUILD_SSH_KEY }}

      - name: Fix nix.conf
        working-directory: .
        run: |
          NIX_BUILDERS_FILE="$(mktemp)"
          cat >"$NIX_BUILDERS_FILE" <<EOF
          eu.nixbuild.net x86_64-linux - 100 1 big-parallel,benchmark
          eu.nixbuild.net i686-linux - 100 1 big-parallel,benchmark
          eu.nixbuild.net aarch64-linux - 100 1 big-parallel,benchmark
          eu.nixbuild.net armv7l-linux - 100 1 big-parallel,benchmark
          EOF

          NIX_CONF_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/nix/nix.conf"
          echo "builders = @$NIX_BUILDERS_FILE" >>"$NIX_CONF_FILE"
          cat "$NIX_CONF_FILE"

      - name: Upload flake inputs to Cachix
        working-directory: .
        run: |
          CACHIX_AUTH_TOKEN=${{ secrets.CACHIX_AUTH_TOKEN }} nix run github:quyo/shellscripts.nix#cachix-push-flake-inputs .

      - name: Upload flake outputs to Cachix
        working-directory: .
        run: |
          CACHIX_AUTH_TOKEN=${{ secrets.CACHIX_AUTH_TOKEN }} nix run github:quyo/shellscripts.nix#cachix-push-flake-runtime-closure-single .#packages.armv7l-linux.ci-publish
          CACHIX_AUTH_TOKEN=${{ secrets.CACHIX_AUTH_TOKEN }} nix run github:quyo/shellscripts.nix#cachix-push-flake-runtime-closure-single .#packages.x86_64-linux.ci-publish

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to git.quyo.net
        uses: docker/login-action@v2
        with:
          registry: git.quyo.net
          username: ${{ secrets.GIT_QUYO_NET_USERNAME }}
          password: ${{ secrets.GIT_QUYO_NET_ACCESS_TOKEN }}

      - name: Load and push docker image (qnixpkgs:latest)
        working-directory: .
        run: |
          nix run github:quyo/shellscripts.nix#docker-load-nix-build .#docker
          docker push quyo/qnixpkgs:latest
          docker tag quyo/qnixpkgs:latest git.quyo.net/quyo/qnixpkgs:latest
          docker push git.quyo.net/quyo/qnixpkgs:latest

  build-and-upload-danecheck:
    name: Build and upload danecheck
    runs-on: ubuntu-22.04
    needs: upload-flake
    steps:
      - uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            extra-substituters = https://quyo-public.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= quyo-public.cachix.org-1:W83ifK7/6EvKU4Q2ZxvHRAkiIRzPeXYnp9LWHezs5U0=
            require-sigs = true

      - name: Build danecheck locally without sandbox
        working-directory: .
        run: |
          nix --no-sandbox build .#danecheck
          nix --no-sandbox build .#danecheck-unstable

      - name: Upload danecheck outputs to Cachix
        working-directory: .
        run: |
          CACHIX_AUTH_TOKEN=${{ secrets.CACHIX_AUTH_TOKEN }} nix run github:quyo/shellscripts.nix#cachix-push-flake-runtime-closure-single .#danecheck
          CACHIX_AUTH_TOKEN=${{ secrets.CACHIX_AUTH_TOKEN }} nix run github:quyo/shellscripts.nix#cachix-push-flake-runtime-closure-single .#danecheck-unstable
